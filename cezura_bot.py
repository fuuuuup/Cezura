import logging, json, os, asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from flask import Flask
from threading import Thread

# --- Flask –¥–ª—è Render Web Service ---
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# --- Telegram Bot ---
API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
DATA_FILE = 'cezura_data.json'

# --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ---
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_data(d):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(d, f, indent=2, ensure_ascii=False)

def log_event(user_id, event_text):
    now = datetime.utcnow() + timedelta(hours=3)  # –ú–°–ö
    d = load_data()
    d.setdefault(str(user_id), []).append({
        "event": event_text.strip(),
        "time": now.isoformat()
    })
    save_data(d)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(lambda msg: msg.text.lower().startswith("–∫—É—Ä–∏–ª–∞"))
async def kurila(message: types.Message):
    log_event(message.from_user.id, message.text)
    await message.reply("–ó–∞–ø–∏—Å–∞–Ω–æ ‚Äî –∫—É—Ä–∏–ª–∞.")

@dp.message_handler(lambda msg: msg.text.lower().startswith("—É–¥–µ—Ä–∂–∞–ª–∞—Å—å"))
async def ud(message: types.Message):
    log_event(message.from_user.id, message.text)
    await message.reply("–ú–æ–ª–æ–¥–µ—Ü ‚Äî —É–¥–µ—Ä–∂–∞–ª–∞—Å—å.")

@dp.message_handler(lambda msg: msg.text.lower().startswith("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def stats(message: types.Message):
    data = load_data().get(str(message.from_user.id), [])
    if not data:
        await message.reply("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
        return

    now = datetime.utcnow() + timedelta(hours=3)
    periods = {
        "—Å–µ–≥–æ–¥–Ω—è": now.replace(hour=0, minute=0, second=0, microsecond=0),
        "7 –¥–Ω–µ–π": now - timedelta(days=7),
        "30 –¥–Ω–µ–π": now - timedelta(days=30),
        "180 –¥–Ω–µ–π": now - timedelta(days=180),
    }

    report = []

    for label, start_time in periods.items():
        filtered = [
            e for e in data
            if datetime.fromisoformat(e["time"]) >= start_time
        ]
        kurila = [e for e in filtered if e["event"].lower().startswith("–∫—É—Ä–∏–ª–∞")]
        ud = [e for e in filtered if e["event"].lower().startswith("—É–¥–µ—Ä–∂–∞–ª–∞—Å—å")]

        report.append(f"üìÖ *{label.capitalize()}*:")
        report.append(f"‚ÄÉ–ö—É—Ä–∏–ª–∞: {len(kurila)}")
        report.append(f"‚ÄÉ–£–¥–µ—Ä–∂–∞–ª–∞—Å—å: {len(ud)}")

        if filtered:
            report.append("‚ÄÉ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
            for e in filtered:
                t = datetime.fromisoformat(e["time"]).strftime('%d.%m %H:%M')
                report.append(f"‚ÄÉ‚ÄÉ{t} ‚Äî {e['event']}")

        report.append("")

    await message.reply("\n".join(report), parse_mode="Markdown")

@dp.message_handler(lambda msg: msg.text.lower().startswith("—Å–±—Ä–æ—Å"))
async def reset(message: types.Message):
    d = load_data()
    if str(message.from_user.id) in d:
        del d[str(message.from_user.id)]
        save_data(d)
        await message.reply("–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.reply("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å ‚Äî –∑–∞–ø–∏—Å–µ–π –Ω–µ –±—ã–ª–æ.")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ 21:00 –ú–°–ö ---
async def daily_check():
    while True:
        now = datetime.utcnow() + timedelta(hours=3)  # –ú–°–ö
        if now.hour == 21 and now.minute == 0:
            data = load_data()
            for user_id_str, events in data.items():
                user_events = [
                    (datetime.fromisoformat(e["time"]), e["event"])
                    for e in events
                ]
                today = now.replace(hour=0, minute=0, second=0, microsecond=0)
                yesterday = today - timedelta(days=1)

                count_today = sum(1 for dt, ev in user_events if dt >= today and ev.lower().startswith("–∫—É—Ä–∏–ª–∞"))
                count_yesterday = sum(1 for dt, ev in user_events if yesterday <= dt < today and ev.lower().startswith("–∫—É—Ä–∏–ª–∞"))

                # –°–æ–æ–±—â–µ–Ω–∏–µ
                if count_today == 0:
                    msg = "üéâ –¢—ã –Ω–µ –∫—É—Ä–∏–ª–∞ –Ω–∏ —Ä–∞–∑—É —Å–µ–≥–æ–¥–Ω—è. –≠—Ç–æ —Å–∏–ª—å–Ω–æ. –¢—ã ‚Äî –∫—Ä–µ–ø–∫–∞—è."
                elif count_today < count_yesterday:
                    msg = f"üëç –°–µ–≥–æ–¥–Ω—è –º–µ–Ω—å—à–µ, —á–µ–º –≤—á–µ—Ä–∞ ({count_today} vs {count_yesterday}). –í–æ—Ç —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π!"
                elif count_today > count_yesterday:
                    msg = f"üí° –°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —á—É—Ç—å –±–æ–ª—å—à–µ ({count_today} vs {count_yesterday}). –ù–∏—á–µ–≥–æ. –ó–∞–≤—Ç—Ä–∞ ‚Äî —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å."
                else:
                    msg = f"‚ûñ –°–µ–≥–æ–¥–Ω—è —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –≤—á–µ—Ä–∞ ({count_today}). –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ —Ç–æ–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π."

                try:
                    await bot.send_message(int(user_id_str), msg)
                except:
                    pass  # –≤–¥—Ä—É–≥ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

            await asyncio.sleep(60)
        else:
            await asyncio.sleep(20)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    Thread(target=run_flask).start()
    loop = asyncio.get_event_loop()
    loop.create_task(daily_check())
    executor.start_polling(dp, skip_updates=True)
